<?php

/**
 * @file
 * Field support for element_order.module
 *
 * Allow the administrator to configure help text position of fields in forms,
 * in addition to theme override for default rendering of multi value fields.
 */

/**
 * Implements hook_theme().
 */
function element_order_fields_theme() {
  $theme_file = array(
    'file' => 'element_order_fields.theme.inc',
  );
  return array(
    'element_order_fields_multiple_form' => array(
      'render element' => 'element',
    ),
    'element_order_fields_matrix_table' => $theme_file + array(
      'render element' => 'form',
    ),
    'element_order_fields_collection_table' => $theme_file + array(
      'render element' => 'element',
      'includes' => array(drupal_get_path('module', 'field_collection_table') . '/theme/theme.inc'),
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function element_order_fields_theme_registry_alter(&$theme_registry) {
  $us = drupal_get_path('module', 'element_order_fields');

  $overrides = array(
    'field_collection_table_multiple_value_fields' => 'element_order_fields_theme_field_collection_table',
  );

  foreach ($overrides as $theme_hook => $override_function) {
    if (!empty($theme_registry[$theme_hook])) {
      $theme_registry[$theme_hook]['function'] = $override_function;
      $theme_registry[$theme_hook]['includes'][] = $us . '/element_order_fields.overrides.inc';
    }
  }
}

/**
 * Implements hook_field_attach_form().
 *
 * One of two approaces in processing of fields. This is used to alter the
 * wrapper/container of the fields.
 */
function element_order_fields_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  $options['language'] = field_valid_language($langcode);
  $form += (array) _field_invoke_default('process_element_order', $entity_type, $entity, $form, $form_state, $options);
}

/**
 * Custom default field operation.
 *
 * Determine description position for field and replace the default field
 * behavior form ('field_multiple_value_form') with our custom theme if
 * necessary.
 */
function field_default_process_element_order($entity_type, $entity, $field, $instance, $langcode, $items, &$form, &$form_state) {
  $field_name = $field['field_name'];
  if (!empty($form[$field_name][$langcode])) {
    if (!empty($instance['settings']['description_display']) and $instance['settings']['description_display'] == 'before') {
      $form[$field_name][$langcode]['#description_display'] = 'before';
      $multiple = ($field['cardinality'] > 1 or $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED);
      $default_behavior = field_behaviors_widget('multiple values', $instance) == FIELD_BEHAVIOR_DEFAULT;
      if ($multiple and $default_behavior) {
        $form[$field_name][$langcode]['#theme'] = 'element_order_fields_multiple_form';
      }
      if ($instance['widget']['type'] == 'field_collection_table') {
        $form[$field_name][$langcode]['#after_build'][] = 'element_order_fields_field_collection_table_after_build';
      }
    }
  }
}

/**
 * Provide our own theme for field_collection_table widgets.
 */
function element_order_fields_field_collection_table_after_build($element) {
  $element['#theme'] = 'element_order_fields_collection_table';
  return $element;
}


/**
 * Implements hook_field_widget_form_alter().
 *
 * The second approach for processing fields. This function has ha slew of
 * follow-up implementations more specific to the type of widget used, but they
 * all depend on this to set the '#description_display' attribute.
 */
function element_order_fields_field_widget_form_alter(&$element, &$form_state, $context) {
  $instance = $context['instance'];
  if (empty($instance['settings']['description_display'])) {
    return;
  }
  $field = $context['field'];
  $field_name = $field['field_name'];
  $multiple = ($field['cardinality'] > 1 or $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED);
  $default_behavior = field_behaviors_widget('multiple values', $instance) == FIELD_BEHAVIOR_DEFAULT;
  if ($default_behavior and $multiple) {
    // Handled by hook_field_attach_form().
    return;
  }
  // This doesn't do any harm, no matter what subelement the field widget form
  // function puts it in. And for many widgets this is enough.
  $element['#description_display'] = $instance['settings']['description_display'];

  // While other widgets moves/copies the description to some sub-element.
  $widget_type = $instance['widget']['type'];
  static $widget_sub = array(
    'number' => 'value',
    'email_textfield' => 'email',
  );
  if (isset($widget_sub[$widget_type])) {
    $sub = $widget_sub[$widget_type];
    $element[$sub]['#description_display'] = $instance['settings']['description_display'];
  }
  // Finally, a few special widgets needs special treatment, so the logics there
  // are moved to separate hook_field_widget_WIDGET_TYPE_form_alter() hooks.
  // Individual implementations below.
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for 'text_textarea'.
 */
function element_order_fields_field_widget_text_textarea_form_alter(&$element, &$form_state, $context) {
  if (empty($element['#description_display'])) {
    return;
  }
  if (!$context['instance']['settings']['text_processing']) {
    $element['value']['#description_display'] = $element['#description_display'];
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for 'text_textfield'.
 */
function element_order_fields_field_widget_text_textfield_form_alter(&$element, &$form_state, $context) {
  element_order_fields_field_widget_text_textarea_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for 'file_generic'.
 */
function element_order_fields_field_widget_file_generic_form_alter(&$element, &$form_state, $context) {
  if (empty($element['#description_display'])) {
    return;
  }

  foreach (element_children($element) as $delta => $child) {
    $element[$delta]['#description_display'] = $element['#description_display'];
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for 'image_image'.
 */
function element_order_fields_field_widget_image_image_form_alter(&$element, &$form_state, $context) {
  element_order_fields_field_widget_file_generic_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for media_generic().
 */
function element_order_fields_field_widget_media_generic_form_alter(&$element, &$form_state, $context) {
  element_order_fields_field_widget_file_generic_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for 'date_popup'.
 */
function element_order_fields_field_widget_date_popup_form_alter(&$element, &$form_state, $context) {
  if (empty($element['#description_display'])) {
    return;
  }
  if ($element['#description_display'] == 'before') {
    $element['#fieldset_description'] = $element['#description'];
    if (empty($context['field']['settings']['todate'])) {
      unset($element['#description']);
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for 'date_select'.
 */
function element_order_fields_field_widget_date_select_form_alter(&$element, &$form_state, $context) {
  element_order_fields_field_widget_date_popup_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for 'date_text'.
 */
function element_order_fields_field_widget_date_text_form_alter(&$element, &$form_state, $context) {
  element_order_fields_field_widget_date_popup_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for matrix_custom().
 */
function element_order_fields_field_widget_matrix_text_form_alter(&$element, &$form_state, $context) {
  $element['#theme'] = 'element_order_fields_matrix_table';
}

function element_order_fields_field_widget_matrix_custom_form_alter(&$element, &$form_state, $context) {
  $element['#theme'] = 'element_order_fields_matrix_table';
}

/**
 * Implements hook_form_FORM_ID_alter() for field_ui_field_edit_form().
 */
function element_order_fields_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  // Minor justification of help text description to reflect that the position
  // of the description arent set in stone.
  $form['instance']['description']['#description'] = t('Instructions to present to the user for this field on the editing form.<br />Allowed HTML tags: @tags', array('@tags' => _field_filter_xss_display_allowed_tags()));
  $form['instance']['settings']['description_display'] = array(
    '#type' => 'radios',
    '#title' => t("Help text position"),
    '#description' => t("Descriptions for form elements are usually rendered after the input element. Use this to override the default behavior."),
    // Let's eat our own dogfood, and give a user a preview of what this does.
    // It also serves as a sanity check for whether this property works or not.
    '#description_display' => 'before',
    '#options' => array('before' => t("Before"), 'after' => t("After")),
    '#default_value' => empty($form['#instance']['settings']['description_display']) ? 'after' : $form['#instance']['settings']['description_display'],
    '#states' => array(
      'visible' => array(
        ':input[name="instance[description]"]' => array('empty' => FALSE),
      ),
    ),
  );
  // A bit intrusive, but stick label and description together with the
  // description_display setting.
  $form['instance']['element_order'] = array(
    '#type' => 'fieldset',
    '#title' => t("Label and help text"),
    '#tree' => FALSE,
    '#weight' => -9,
  );
  $form['instance']['#pre_render'][] = 'element_order_fields_widget_settings_pre_render';
}

/**
 * Group label, description and description position items together.
 *
 * #pre_render callback for field widget settings form.
 */
function element_order_fields_widget_settings_pre_render($form) {
  $form['element_order']['label'] = $form['label'];
  $form['element_order']['description'] = $form['description'];
  $form['element_order']['description_display'] = $form['instance_description_display'];
  unset($form['label'], $form['description'], $form['instance_description_display']);
  uasort($form['element_order'], 'element_sort');
  return $form;
}

/**
 * Partial theme override for 'field_multiple_value_form'.
 *
 * This only overrides default field widget behavior with multi value fields.
 *
 * @see modules/field/field.form.inc:theme_field_multiple_value_form().
 */
function theme_element_order_fields_multiple_form($variables) {
  $element = $variables['element'];
  $output = '';

  $table_id = drupal_html_id($element['#field_name'] . '_values');
  $order_class = $element['#field_name'] . '-delta-order';
  $required = !empty($element['#required']) ? theme('form_required_marker', $variables) : '';

  $header = array(
    array(
      'data' => '<label>' . t('!title !required', array('!title' => $element['#title'], '!required' => $required)) . "</label>",
      'colspan' => 2,
      'class' => array('field-label'),
    ),
    t('Order'),
  );
  $rows = array();

  // Sort items according to '_weight' (needed when the form comes back after
  // preview or failed validation)
  $items = array();
  foreach (element_children($element) as $key) {
    if ($key === 'add_more') {
      $add_more_button = &$element[$key];
    }
    else {
      $items[] = &$element[$key];
    }
  }
  usort($items, '_field_sort_items_value_helper');

  // Add the items as table rows.
  foreach ($items as $key => $item) {
    $item['_weight']['#attributes']['class'] = array($order_class);
    $delta_element = drupal_render($item['_weight']);
    $cells = array(
      array('data' => '', 'class' => array('field-multiple-drag')),
      drupal_render($item),
      array('data' => $delta_element, 'class' => array('delta-order')),
    );
    $rows[] = array(
      'data' => $cells,
      'class' => array('draggable'),
    );
  }
  $parts['children'] = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('field-multiple-table'))));
  if ($element['#description']) {
    $parts['description'] = '<div class="description">' . $element['#description'] . '</div>';
  }
  $output = '<div class="form-item">';
  $output .= element_order_output($element, $parts);
  $output .= '<div class="clearfix">' . drupal_render($add_more_button) . '</div>';
  $output .= '</div>';

  drupal_add_tabledrag($table_id, 'order', 'sibling', $order_class);
  return $output;
}
